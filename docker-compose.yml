# docker-compose.yml
# üêã JungleGaming Full-stack Challenge ‚Äî Ambiente de Desenvolvimento e Produ√ß√£o Lite
# Stack: NestJS microservices + RabbitMQ + PostgreSQL + React (TanStack Router)

services:
  # üóÑÔ∏è Banco de dados Postgres
  db:
    profiles: ["dev", "prod-lite"]
    image: postgres:17.5-alpine3.21
    container_name: db-challenge-jungle-gaming
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-challenge_db}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - challenge-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-challenge_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # üêá Broker de Mensagens RabbitMQ
  rabbitmq:
    profiles: ["dev", "prod-lite"]
    image: rabbitmq:3.13-management-alpine
    container_name: rabbitmq-challenge-jungle-gaming
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-admin}
    ports:
      - "${RABBITMQ_AMQP_PORT:-5672}:5672"
      - "${RABBITMQ_UI_PORT:-15672}:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - challenge-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 10s
      timeout: 5s
      retries: 5

  # üîê Servi√ßo de Autentica√ß√£o ‚Äî Desenvolvimento
  auth-service:
    profiles: ["dev"]
    build:
      context: .
      dockerfile: apps/auth/Dockerfile
      target: dev
    container_name: auth-service-dev
    command: >-
      sh -c "pnpm install --filter @apps/auth-service... --frozen-lockfile && pnpm --filter @apps/auth-service... dev"
    working_dir: /workspace
    environment:
      NODE_ENV: development
      AUTH_SERVICE_PORT: ${AUTH_SERVICE_PORT:-4010}
      DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@db:5432/${POSTGRES_DB:-challenge_db}
      JWT_SECRET: ${JWT_SECRET:-supersecret}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-15m}
      BCRYPT_SALT_ROUNDS: ${BCRYPT_SALT_ROUNDS:-10}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "${AUTH_SERVICE_PORT:-4010}:4010"
    volumes:
      - .:/workspace
      - pnpm-store:/pnpm/store
      - root-node-modules:/workspace/node_modules
      - auth-node-modules:/workspace/apps/auth/node_modules
    networks:
      - challenge-network

  # üîê Servi√ßo de Autentica√ß√£o ‚Äî Produ√ß√£o Lite
  auth-service-lite:
    profiles: ["prod-lite"]
    build:
      context: .
      dockerfile: apps/auth/Dockerfile
      target: runtime
    container_name: auth-service-lite
    environment:
      NODE_ENV: production
      AUTH_SERVICE_PORT: ${AUTH_SERVICE_PORT:-4010}
      DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@db:5432/${POSTGRES_DB:-challenge_db}
      JWT_SECRET: ${JWT_SECRET:-supersecret}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-15m}
      BCRYPT_SALT_ROUNDS: ${BCRYPT_SALT_ROUNDS:-10}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "${AUTH_SERVICE_PORT:-4010}:4010"
    networks:
      - challenge-network

  # ‚öôÔ∏è API Gateway ‚Äî Desenvolvimento
  api-gateway:
    profiles: ["dev"]
    build:
      context: .
      dockerfile: apps/api/Dockerfile
      target: dev
    container_name: api-gateway-dev
    command: >-
      sh -c "pnpm install --filter @apps/api-gateway... --frozen-lockfile && pnpm --filter @apps/api-gateway... dev"
    working_dir: /workspace
    environment:
      NODE_ENV: development
      PORT: ${API_PORT:-3001}
      AUTH_SERVICE_HOST: auth-service
      AUTH_SERVICE_PORT: 4010
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASS:-admin}@rabbitmq:5672
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
    depends_on:
      db:
        condition: service_healthy
      auth-service:
        condition: service_started
    ports:
      - "${API_PORT:-3001}:3001"
    volumes:
      - .:/workspace
      - pnpm-store:/pnpm/store
      - root-node-modules:/workspace/node_modules
      - api-node-modules:/workspace/apps/api/node_modules
    networks:
      - challenge-network

  # ‚öôÔ∏è API Gateway ‚Äî Produ√ß√£o Lite
  api-gateway-lite:
    profiles: ["prod-lite"]
    build:
      context: .
      dockerfile: apps/api/Dockerfile
      target: runtime
    container_name: api-gateway-lite
    environment:
      NODE_ENV: production
      PORT: ${API_PORT:-3001}
      AUTH_SERVICE_HOST: auth-service-lite
      AUTH_SERVICE_PORT: 4010
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASS:-admin}@rabbitmq:5672
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
    depends_on:
      db:
        condition: service_healthy
      auth-service-lite:
        condition: service_started
    ports:
      - "${API_PORT:-3001}:3001"
    networks:
      - challenge-network

  # üß© Servi√ßo de Tarefas ‚Äî Desenvolvimento
  tasks-service:
    profiles: ["dev"]
    build:
      context: .
      dockerfile: apps/tasks/Dockerfile
      target: dev
    container_name: tasks-service-dev
    command: >-
      sh -c "pnpm install --filter @apps/tasks-service... --frozen-lockfile && pnpm --filter @apps/tasks-service... dev"
    working_dir: /workspace
    environment:
      NODE_ENV: development
      PORT: ${TASKS_PORT:-3003}
      DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@db:5432/${POSTGRES_DB:-challenge_db}
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASS:-admin}@rabbitmq:5672
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "${TASKS_PORT:-3003}:3003"
    volumes:
      - .:/workspace
      - pnpm-store:/pnpm/store
      - root-node-modules:/workspace/node_modules
      - tasks-node-modules:/workspace/apps/tasks/node_modules
    networks:
      - challenge-network

  # üß© Servi√ßo de Tarefas ‚Äî Produ√ß√£o Lite
  tasks-service-lite:
    profiles: ["prod-lite"]
    build:
      context: .
      dockerfile: apps/tasks/Dockerfile
      target: runtime
    container_name: tasks-service-lite
    environment:
      NODE_ENV: production
      PORT: ${TASKS_PORT:-3003}
      DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@db:5432/${POSTGRES_DB:-challenge_db}
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASS:-admin}@rabbitmq:5672
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "${TASKS_PORT:-3003}:3003"
    networks:
      - challenge-network

  # üîî Servi√ßo de Notifica√ß√µes ‚Äî Desenvolvimento
  notifications-service:
    profiles: ["dev"]
    build:
      context: .
      dockerfile: apps/notifications/Dockerfile
      target: dev
    container_name: notifications-service-dev
    command: >-
      sh -c "pnpm install --filter @apps/notifications-service... --frozen-lockfile && pnpm --filter @apps/notifications-service... dev"
    working_dir: /workspace
    environment:
      NODE_ENV: development
      PORT: ${NOTIFICATIONS_PORT:-3005}
      DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@db:5432/${POSTGRES_DB:-challenge_db}
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASS:-admin}@rabbitmq:5672
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "${NOTIFICATIONS_PORT:-3005}:3005"
    volumes:
      - .:/workspace
      - pnpm-store:/pnpm/store
      - root-node-modules:/workspace/node_modules
      - notifications-node-modules:/workspace/apps/notifications/node_modules
    networks:
      - challenge-network

  # üîî Servi√ßo de Notifica√ß√µes ‚Äî Produ√ß√£o Lite
  notifications-service-lite:
    profiles: ["prod-lite"]
    build:
      context: .
      dockerfile: apps/notifications/Dockerfile
      target: runtime
    container_name: notifications-service-lite
    environment:
      NODE_ENV: production
      PORT: ${NOTIFICATIONS_PORT:-3005}
      DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@db:5432/${POSTGRES_DB:-challenge_db}
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASS:-admin}@rabbitmq:5672
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "${NOTIFICATIONS_PORT:-3005}:3005"
    networks:
      - challenge-network

  # üåê Front-end React (TanStack Router + shadcn/ui) ‚Äî Desenvolvimento
  web:
    profiles: ["dev"]
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      target: dev
    container_name: web-app-dev
    command: >-
      sh -c "pnpm install --filter @apps/web... --frozen-lockfile && pnpm --filter @apps/web... dev"
    working_dir: /workspace
    environment:
      NODE_ENV: development
      PORT: ${WEB_PORT:-3000}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3001/api}
    depends_on:
      api-gateway:
        condition: service_started
    ports:
      - "${WEB_PORT:-3000}:3000"
    volumes:
      - .:/workspace
      - pnpm-store:/pnpm/store
      - root-node-modules:/workspace/node_modules
      - web-node-modules:/workspace/apps/web/node_modules
    networks:
      - challenge-network

  # üåê Front-end React ‚Äî Produ√ß√£o Lite
  web-lite:
    profiles: ["prod-lite"]
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      target: runtime
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3001/api}
    container_name: web-app-lite
    depends_on:
      api-gateway-lite:
        condition: service_started
    ports:
      - "${WEB_PORT:-3000}:80"
    networks:
      - challenge-network

# üß± Volumes persistentes
volumes:
  postgres_data:
  rabbitmq_data:
  pnpm-store:
  root-node-modules:
  auth-node-modules:
  api-node-modules:
  tasks-node-modules:
  notifications-node-modules:
  web-node-modules:

# üåê Rede compartilhada entre todos os servi√ßos
networks:
  challenge-network:
    driver: bridge
